{"version":3,"sources":["../../src/checking/index.js"],"names":["BBChecking","year","month","pad","s","toString","padStart","transactionsUrl","params","periodo","BASE_ENDPOINT","headers","DEFAULT_HEADERS","cookie","LoginCookie","getGlobal","method","body","querystring","stringify","response","text","json","JSON","parse","console","log","transactions","conteiner","telas","sessoes","reduce","acc","session","monthString","TIPO","cabecalho","indexOf","celulas","cellAcc","cell","componentes","length","texto","description","day","amount","includes","date","Date","balanceUrl","servicoSaldo","saldo"],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nimport querystring from 'querystring';\nimport LoginCookie from '../loginCookie';\nimport { BASE_ENDPOINT, DEFAULT_HEADERS } from '../constants';\nimport { treatDescription, parseAmountString } from '../helpers';\n\nexport default class BBChecking {\n  async getTransactions({ year, month }) {\n    const pad = s => s.toString().padStart('0', 2);\n    const transactionsUrl = 'tela/ExtratoDeContaCorrente/extrato';\n\n    let params = {};\n\n    if (year && month) {\n      params = { periodo: `00${pad(month)}${year}` };\n    }\n\n    const response = await fetch(`${BASE_ENDPOINT}${transactionsUrl}`, {\n      headers: {\n        ...DEFAULT_HEADERS,\n        cookie: LoginCookie.getGlobal(),\n      },\n      method: 'POST',\n      body: querystring.stringify(params),\n    });\n\n    const text = await response.text();\n    const json = JSON.parse(text);\n    console.log(json);\n\n    const transactions = json.conteiner.telas[0].sessoes.reduce(\n      (acc, session) => {\n        const monthString = 'Mês referência: ';\n        if (\n          session.TIPO === 'sessao' &&\n          session.cabecalho &&\n          session.cabecalho.indexOf(monthString) === 0\n        ) {\n          return [\n            ...acc,\n            ...session.celulas.reduce((cellAcc, cell) => {\n              if (\n                cell.TIPO === 'celula' &&\n                cell.componentes.length === 3 &&\n                cell.componentes[0].componentes[0].texto !== 'Dia'\n              ) {\n                const description = cell.componentes[1].componentes[0].texto;\n                const day = cell.componentes[0].componentes[0].texto;\n                const amount = cell.componentes[2].componentes[0].texto;\n\n                if (['Saldo Anterior', 'S A L D O'].includes(description)) {\n                  return cellAcc;\n                }\n\n                return [\n                  ...cellAcc,\n                  {\n                    date: new Date(year, month - 1, day),\n                    description: treatDescription(description),\n                    amount: parseAmountString(amount),\n                  },\n                ];\n              }\n\n              return cellAcc;\n            }, []),\n          ];\n        }\n\n        return acc;\n      },\n      [],\n    );\n\n    return transactions;\n  }\n\n  async getBalance() {\n    const balanceUrl = 'servico/ServicoSaldo/saldo';\n\n    const response = await fetch(`${BASE_ENDPOINT}${balanceUrl}`, {\n      headers: {\n        ...DEFAULT_HEADERS,\n        cookie: LoginCookie.getGlobal(),\n      },\n      method: 'POST',\n    });\n\n    const text = await response.text();\n    const { servicoSaldo } = JSON.parse(text);\n\n    const { saldo } = servicoSaldo;\n\n    return parseAmountString(saldo);\n  }\n}\n"],"file":"index.js"}