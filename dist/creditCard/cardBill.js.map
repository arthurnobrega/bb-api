{"version":3,"sources":["../../src/creditCard/cardBill.js"],"names":["stringToAmount","string","parseFloat","replace","stringToDate","parts","split","day","month","year","length","Date","stringToDateInstallment","parseInt","BBCardBill","cardAccountNumber","billId","billDate","transactionsUrl","params","numeroContaCartao","sequencialFatura","dataFatura","tipoExtrato","BASE_ENDPOINT","headers","DEFAULT_HEADERS","cookie","LoginCookie","getGlobal","method","body","querystring","stringify","response","text","json","JSON","parse","conteiner","telas","sessoes","map","s","cabecalho","celulas","slice","type","date","c","componentes","texto","description","amount","reduce","transactions","session"],"mappings":"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","file":"cardBill.js","sourcesContent":["import fetch from 'node-fetch';\nimport querystring from 'querystring';\nimport LoginCookie from '../loginCookie';\nimport { BASE_ENDPOINT, DEFAULT_HEADERS } from '../constants';\nimport { treatDescription } from '../helpers';\n\nfunction stringToAmount(string) {\n  return (\n    -1 *\n    parseFloat(\n      string\n        .replace('R$ ', '')\n        .replace('.', '')\n        .replace(',', '.'),\n    )\n  );\n}\n\nfunction stringToDate(string) {\n  const parts = string.split('/');\n  const day = parts[0];\n  const month = parts[1];\n  let year = parts[2];\n\n  if (year.length === 2) {\n    year = `20${year}`;\n  }\n\n  return new Date(year, month, day);\n}\n\nfunction stringToDateInstallment(string, month) {\n  const parts = string.split('/');\n  const day = parts[0];\n  const year = `20${parts[2]}`;\n\n  return new Date(year, parseInt(month, 10) - 1, day);\n}\n\nexport default class BBCardBill {\n  constructor({ cardAccountNumber, billId, billDate }) {\n    this.cardAccountNumber = cardAccountNumber;\n    this.billId = billId;\n    this.billDate = billDate;\n  }\n\n  async getTransactions() {\n    const transactionsUrl = 'tela/ExtratoFatura/extrato';\n\n    const params = {\n      numeroContaCartao: this.cardAccountNumber,\n      sequencialFatura: this.billId,\n      dataFatura: this.billDate,\n      tipoExtrato: 'F',\n    };\n\n    const response = await fetch(`${BASE_ENDPOINT}${transactionsUrl}`, {\n      headers: {\n        ...DEFAULT_HEADERS,\n        cookie: LoginCookie.getGlobal(),\n      },\n      method: 'POST',\n      body: querystring.stringify(params),\n    });\n\n    const text = await response.text();\n    const json = JSON.parse(text);\n\n    return json.conteiner.telas[0].sessoes\n      .map(s => {\n        if (s.cabecalho === '    Pagamentos') {\n          return s.celulas.slice(1).map(c => ({\n            type: 'payment',\n            date: stringToDate(c.componentes[0].componentes[0].texto),\n            description: treatDescription(\n              c.componentes[1].componentes[0].texto,\n            ),\n            amount: stringToAmount(c.componentes[2].componentes[0].texto),\n          }));\n        }\n\n        if (s.cabecalho === '    Compras a vista') {\n          return s.celulas.slice(1).map(c => ({\n            type: 'atSight',\n            date: stringToDate(c.componentes[0].componentes[0].texto),\n            description: treatDescription(\n              c.componentes[1].componentes[0].texto,\n            ),\n            amount: stringToAmount(c.componentes[2].componentes[0].texto),\n          }));\n        }\n\n        if (s.cabecalho === '    Compras/Pgto Contas Parc') {\n          return s.celulas.slice(2).map(c => ({\n            type: 'installment',\n            date: stringToDateInstallment(\n              c.componentes[0].componentes[0].texto,\n              this.billDate.slice(2, 4),\n            ),\n            description: treatDescription(\n              c.componentes[1].componentes[0].texto,\n            ),\n            amount: stringToAmount(c.componentes[2].componentes[0].texto),\n          }));\n        }\n\n        return [];\n      })\n      .reduce((transactions, session) => [...transactions, ...session], []);\n  }\n}\n"]}