{"version":3,"sources":["../../src/creditCard/cardBill.js"],"names":["stringToAmount","string","parseFloat","split","slice","join","replace","stringToDate","parts","day","month","year","length","Date","parseInt","stringToDateInstallment","date","description","billDate","installment","match","test","BBCardBill","cardAccountNumber","billId","status","transactionsUrl","params","numeroContaCartao","sequencialFatura","dataFatura","tipoExtrato","BASE_ENDPOINT","headers","DEFAULT_HEADERS","cookie","LoginCookie","getGlobal","method","body","querystring","stringify","response","text","json","JSON","parse","conteiner","telas","sessoes","map","s","cabecalho","trim","celulas","filter","c","componentes","texto","amount","type","currency","reduce","transactions","session"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,SACE,CAAC,CAAD,GACAC,WACED,OACGE,KADH,CACS,GADT,EAEGC,KAFH,CAES,CAFT,EAGGC,IAHH,GAIGC,OAJH,CAIW,GAJX,EAIgB,EAJhB,EAKGA,OALH,CAKW,GALX,EAKgB,GALhB,CADF,CAFF;AAWD;;AAED,SAASC,YAAT,CAAsBN,MAAtB,EAA8B;AAC5B,MAAMO,QAAQP,OAAOE,KAAP,CAAa,GAAb,CAAd;AACA,MAAMM,MAAMD,MAAM,CAAN,CAAZ;AACA,MAAME,QAAQF,MAAM,CAAN,CAAd;AACA,MAAIG,OAAOH,MAAM,CAAN,CAAX;;AAEA,MAAIG,KAAKC,MAAL,KAAgB,CAApB,EAAuB;AACrBD,kBAAYA,IAAZ;AACD;;AAED,SAAO,IAAIE,IAAJ,CAASF,IAAT,EAAeG,SAASJ,KAAT,EAAgB,EAAhB,IAAsB,CAArC,EAAwCD,GAAxC,CAAP;AACD;;AAED,SAASM,uBAAT,OAAkE;AAAA,MAA/BC,IAA+B,QAA/BA,IAA+B;AAAA,MAAzBC,WAAyB,QAAzBA,WAAyB;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAChE,MAAMC,cAAcF,YAAYG,KAAZ,CAAkB,0BAAlB,EAA8C,CAA9C,CAApB;AACA,MAAMZ,QAAQQ,KAAKb,KAAL,CAAW,GAAX,CAAd;AACA,MAAMM,MAAMD,MAAM,CAAN,CAAZ;AACA,MAAIE,QAAQI,SAASN,MAAM,CAAN,CAAT,EAAmB,EAAnB,IAAyBM,SAASK,WAAT,EAAsB,EAAtB,CAAzB,GAAqD,CAAjE;AACA,MAAMR,cAAYH,MAAM,CAAN,CAAlB;;AAEA,MAAI,UAAUa,IAAV,CAAeJ,WAAf,CAAJ,EAAiC;AAC/BP,YAAQI,SAASI,SAASd,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAT,EAA+B,EAA/B,IAAqC,CAA7C;AACD;;AAED,SAAO,IAAIS,IAAJ,CAASF,IAAT,EAAeG,SAASJ,KAAT,EAAgB,EAAhB,IAAsB,CAArC,EAAwCD,GAAxC,CAAP;AACD;;IAEoBa,U;AACnB,6BAA6D;AAAA,QAA/CC,iBAA+C,SAA/CA,iBAA+C;AAAA,QAA5BC,MAA4B,SAA5BA,MAA4B;AAAA,QAApBN,QAAoB,SAApBA,QAAoB;AAAA,QAAVO,MAAU,SAAVA,MAAU;AAAA;;AAC3D,SAAKF,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKN,QAAL,GAAgBA,QAAhB;AACA,SAAKO,MAAL,GAAcA,MAAd;AACD;;;;;;;;;;;;;AAGOC,+B,GAAkB,4B;AAEpBC,sB,GAAS,E;;;AAEb,oBAAI,KAAKF,MAAL,KAAgB,QAApB,EAA8B;AAC5BE,2BAAS;AACPC,uCAAmB,KAAKL;AADjB,mBAAT;AAGD,iBAJD,MAIO;AACLI,2BAAS;AACPC,uCAAmB,KAAKL,iBADjB;AAEPM,sCAAkB,KAAKL,MAFhB;AAGPM,gCAAY,KAAKZ,QAHV;AAIPa,iCAAa;AAJN,mBAAT;AAMD;;;uBAEsB,8BAASC,wBAAT,GAAyBN,eAAzB,EAA4C;AACjEO,sDACKC,0BADL;AAEEC,4BAAQC,sBAAYC,SAAZ;AAFV,oBADiE;AAKjEC,0BAAQ,MALyD;AAMjEC,wBAAMC,sBAAYC,SAAZ,CAAsBd,MAAtB;AAN2D,iBAA5C,C;;;AAAjBe,wB;;uBASaA,SAASC,IAAT,E;;;AAAbA,oB;AACAC,oB,GAAOC,KAAKC,KAAL,CAAWH,IAAX,C;iDAENC,KAAKG,SAAL,CAAeC,KAAf,CAAqB,CAArB,EAAwBC,OAAxB,CACJC,GADI,CACA,aAAK;AACR,sBAAIC,EAAEC,SAAF,IAAeD,EAAEC,SAAF,CAAYC,IAAZ,OAAuB,YAA1C,EAAwD;AACtD,2BAAOF,EAAEG,OAAF,CACJlD,KADI,CACE,CADF,EAEJmD,MAFI,CAGH;AAAA,6BACEC,EAAEC,WAAF,CAAc7C,MAAd,KAAyB,CAAzB,IACA4C,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAAhC,KAA0C,EAD1C,IAEAF,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAAhC,KAA0C,EAF1C,IAGAF,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAAhC,KAA0C,EAJ5C;AAAA,qBAHG,EASJR,GATI,CASA,aAAK;AACR,0BAAMlC,OAAOwC,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAA7C;AACA,0BAAMzC,cAAcuC,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAApD;AACA,0BAAMC,SAASH,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAA/C;;AAEA,6BAAO;AACLE,8BAAM,SADD;AAEL5C,8BAAMT,aAAaS,IAAb,CAFD;AAGLC,qCAAa,+BAAiBA,WAAjB,CAHR;AAIL0C,gCAAQ3D,eAAe2D,MAAf;AAJH,uBAAP;AAMD,qBApBI,CAAP;AAqBD;;AAED,sBAAIR,EAAEC,SAAF,IAAeD,EAAEC,SAAF,CAAYC,IAAZ,OAAuB,iBAA1C,EAA6D;AAC3D,2BAAOF,EAAEG,OAAF,CACJlD,KADI,CACE,CADF,EAEJmD,MAFI,CAGH;AAAA,6BACEC,EAAEC,WAAF,CAAc7C,MAAd,KAAyB,CAAzB,IACA4C,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAAhC,KAA0C,EAD1C,IAEAF,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAAhC,KAA0C,EAF1C,IAGAF,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAAhC,KAA0C,EAJ5C;AAAA,qBAHG,EASJR,GATI,CASA,aAAK;AACR,0BAAMlC,OAAOwC,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAA7C;AACA,0BAAMzC,cAAcuC,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAApD;AACA,0BAAMC,SAASH,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAA/C;AACA,0BAAMG,WAAWF,OAAOxD,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAjB;;AAEA,6BAAO;AACLyD,8BAAM,SADD;AAEL5C,8BAAMT,aAAaS,IAAb,CAFD;AAGLC,qCACE4C,aAAa,IAAb,GACI,+BAAiB5C,WAAjB,EAA8B4C,QAA9B,CADJ,GAEI,+BAAiB5C,WAAjB,CAND;AAOL0C,gCAAQ3D,eAAe2D,MAAf;AAPH,uBAAP;AASD,qBAxBI,CAAP;AAyBD;;AAED,sBAAIR,EAAEC,SAAF,IAAeD,EAAEC,SAAF,CAAYC,IAAZ,OAAuB,0BAA1C,EAAsE;AACpE,2BAAOF,EAAEG,OAAF,CACJlD,KADI,CACE,CADF,EACK,CAAC,CADN,EAEJmD,MAFI,CAGH;AAAA,6BACEC,EAAEC,WAAF,CAAc7C,MAAd,KAAyB,CAAzB,IACA4C,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAAhC,KAA0C,EAD1C,IAEAF,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAAhC,KAA0C,EAF1C,IAGAF,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAAhC,KAA0C,EAJ5C;AAAA,qBAHG,EASJR,GATI,CASA,aAAK;AACR,0BAAMlC,OAAOwC,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAA7C;AACA,0BAAMzC,cAAcuC,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAApD;AACA,0BAAMC,SAASH,EAAEC,WAAF,CAAc,CAAd,EAAiBA,WAAjB,CAA6B,CAA7B,EAAgCC,KAA/C;;AAEA,6BAAO;AACLE,8BAAM,aADD;AAEL5C,8BAAMD,wBAAwB;AAC5BE,kDAD4B;AAE5BD,oCAF4B;AAG5BE,oCAAU,MAAKA;AAHa,yBAAxB,CAFD;AAOLD,qCAAa,+BAAiBA,WAAjB,CAPR;AAQL0C,gCAAQ3D,eAAe2D,MAAf;AARH,uBAAP;AAUD,qBAxBI,CAAP;AAyBD;;AAED,yBAAO,EAAP;AACD,iBAnFI,EAoFJG,MApFI,CAoFG,UAACC,YAAD,EAAeC,OAAf;AAAA,oEAA+BD,YAA/B,oCAAgDC,OAAhD;AAAA,iBApFH,EAoF6D,EApF7D,C;;;;;;;;;;;;;;;;;;;;kBAtCU1C,U","file":"cardBill.js","sourcesContent":["import fetch from 'node-fetch';\nimport querystring from 'querystring';\nimport LoginCookie from '../loginCookie';\nimport { BASE_ENDPOINT, DEFAULT_HEADERS } from '../constants';\nimport { treatDescription } from '../helpers';\n\nfunction stringToAmount(string) {\n  return (\n    -1 *\n    parseFloat(\n      string\n        .split(' ')\n        .slice(1)\n        .join()\n        .replace('.', '')\n        .replace(',', '.'),\n    )\n  );\n}\n\nfunction stringToDate(string) {\n  const parts = string.split('/');\n  const day = parts[0];\n  const month = parts[1];\n  let year = parts[2];\n\n  if (year.length === 2) {\n    year = `20${year}`;\n  }\n\n  return new Date(year, parseInt(month, 10) - 1, day);\n}\n\nfunction stringToDateInstallment({ date, description, billDate }) {\n  const installment = description.match(/.*(\\d{2,3})\\/(\\d{2,3}).*/)[1];\n  const parts = date.split('/');\n  const day = parts[0];\n  let month = parseInt(parts[1], 10) + parseInt(installment, 10) - 1;\n  const year = `20${parts[2]}`;\n\n  if (/^ANTEC /.test(description)) {\n    month = parseInt(billDate.slice(2, 4), 10) - 1;\n  }\n\n  return new Date(year, parseInt(month, 10) - 1, day);\n}\n\nexport default class BBCardBill {\n  constructor({ cardAccountNumber, billId, billDate, status }) {\n    this.cardAccountNumber = cardAccountNumber;\n    this.billId = billId;\n    this.billDate = billDate;\n    this.status = status;\n  }\n\n  async getTransactions() {\n    const transactionsUrl = 'tela/ExtratoFatura/extrato';\n\n    let params = {};\n\n    if (this.status === 'opened') {\n      params = {\n        numeroContaCartao: this.cardAccountNumber,\n      };\n    } else {\n      params = {\n        numeroContaCartao: this.cardAccountNumber,\n        sequencialFatura: this.billId,\n        dataFatura: this.billDate,\n        tipoExtrato: 'F',\n      };\n    }\n\n    const response = await fetch(`${BASE_ENDPOINT}${transactionsUrl}`, {\n      headers: {\n        ...DEFAULT_HEADERS,\n        cookie: LoginCookie.getGlobal(),\n      },\n      method: 'POST',\n      body: querystring.stringify(params),\n    });\n\n    const text = await response.text();\n    const json = JSON.parse(text);\n\n    return json.conteiner.telas[0].sessoes\n      .map(s => {\n        if (s.cabecalho && s.cabecalho.trim() === 'Pagamentos') {\n          return s.celulas\n            .slice(1)\n            .filter(\n              c =>\n                c.componentes.length === 3 &&\n                c.componentes[0].componentes[0].texto !== '' &&\n                c.componentes[1].componentes[0].texto !== '' &&\n                c.componentes[2].componentes[0].texto !== '',\n            )\n            .map(c => {\n              const date = c.componentes[0].componentes[0].texto;\n              const description = c.componentes[1].componentes[0].texto;\n              const amount = c.componentes[2].componentes[0].texto;\n\n              return {\n                type: 'payment',\n                date: stringToDate(date),\n                description: treatDescription(description),\n                amount: stringToAmount(amount),\n              };\n            });\n        }\n\n        if (s.cabecalho && s.cabecalho.trim() === 'Compras a vista') {\n          return s.celulas\n            .slice(1)\n            .filter(\n              c =>\n                c.componentes.length === 3 &&\n                c.componentes[0].componentes[0].texto !== '' &&\n                c.componentes[1].componentes[0].texto !== '' &&\n                c.componentes[2].componentes[0].texto !== '',\n            )\n            .map(c => {\n              const date = c.componentes[0].componentes[0].texto;\n              const description = c.componentes[1].componentes[0].texto;\n              const amount = c.componentes[2].componentes[0].texto;\n              const currency = amount.split(' ')[0];\n\n              return {\n                type: 'atSight',\n                date: stringToDate(date),\n                description:\n                  currency !== 'R$'\n                    ? treatDescription(description, currency)\n                    : treatDescription(description),\n                amount: stringToAmount(amount),\n              };\n            });\n        }\n\n        if (s.cabecalho && s.cabecalho.trim() === 'Compras/Pgto Contas Parc') {\n          return s.celulas\n            .slice(2, -2)\n            .filter(\n              c =>\n                c.componentes.length === 3 &&\n                c.componentes[0].componentes[0].texto !== '' &&\n                c.componentes[1].componentes[0].texto !== '' &&\n                c.componentes[2].componentes[0].texto !== '',\n            )\n            .map(c => {\n              const date = c.componentes[0].componentes[0].texto;\n              const description = c.componentes[1].componentes[0].texto;\n              const amount = c.componentes[2].componentes[0].texto;\n\n              return {\n                type: 'installment',\n                date: stringToDateInstallment({\n                  description,\n                  date,\n                  billDate: this.billDate,\n                }),\n                description: treatDescription(description),\n                amount: stringToAmount(amount),\n              };\n            });\n        }\n\n        return [];\n      })\n      .reduce((transactions, session) => [...transactions, ...session], []);\n  }\n}\n"]}