{"version":3,"sources":["../../src/creditCard/card.js"],"names":["BBCard","brand","modality","cardAccountNumber","cardNumber","billsUrl","params","codigoModalidade","numeroContaCartao","numeroPlastico","BASE_ENDPOINT","headers","DEFAULT_HEADERS","cookie","LoginCookie","getGlobal","method","body","querystring","stringify","response","text","json","JSON","parse","conteiner","telas","sessoes","celulas","map","c","protocolo","parametros","p","reduce","acc","BBCardBill","billId","sequencialFatura","billDate","dataFatura"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;IAEqBA,M;AACnB,wBAAgE;AAAA,QAAlDC,KAAkD,QAAlDA,KAAkD;AAAA,QAA3CC,QAA2C,QAA3CA,QAA2C;AAAA,QAAjCC,iBAAiC,QAAjCA,iBAAiC;AAAA,QAAdC,UAAc,QAAdA,UAAc;AAAA;;AAC9D,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;;;;;;;;;;;;AAGOC,wB,GAAW,gC;AAEXC,sB,GAAS;AACbC,oCAAkB,KAAKL,QADV;AAEbM,qCAAmB,KAAKL,iBAFX;AAGbM,kCAAgB,KAAKL;AAHR,iB;;uBAMQ,8BAASM,wBAAT,GAAyBL,QAAzB,EAAqC;AAC1DM,sDACKC,0BADL;AAEEC,4BAAQC,sBAAYC,SAAZ;AAFV,oBAD0D;AAK1DC,0BAAQ,MALkD;AAM1DC,wBAAMC,sBAAYC,SAAZ,CAAsBb,MAAtB;AANoD,iBAArC,C;;;AAAjBc,wB;;uBASaA,SAASC,IAAT,E;;;AAAbA,oB;AACAC,oB,GAAOC,KAAKC,KAAL,CAAWH,IAAX,C;iDAENC,KAAKG,SAAL,CAAeC,KAAf,CAAqB,CAArB,EAAwBC,OAAxB,CAAgC,CAAhC,EAAmCC,OAAnC,CACJC,GADI,CACA;AAAA,yBACHC,EAAEC,SAAF,CAAYC,UAAZ,CACGH,GADH,CACO;AAAA,6DAASI,EAAE,CAAF,CAAT,EAAgBA,EAAE,CAAF,CAAhB;AAAA,mBADP,EAEGC,MAFH,CAEU,UAACC,GAAD,EAAMF,CAAN;AAAA,sDAAkBE,GAAlB,EAA0BF,CAA1B;AAAA,mBAFV,EAE0C,EAF1C,CADG;AAAA,iBADA,EAMJJ,GANI,CAOH;AAAA,yBACE,IAAIO,kBAAJ,CAAe;AACbjC,uCAAmB,MAAKA,iBADX;AAEbkC,4BAAQJ,EAAEK,gBAFG;AAGbC,8BAAUN,EAAEO;AAHC,mBAAf,CADF;AAAA,iBAPG,C;;;;;;;;;;;;;;;;;;;;kBA7BUxC,M","file":"card.js","sourcesContent":["import fetch from 'node-fetch';\nimport querystring from 'querystring';\nimport LoginCookie from '../loginCookie';\nimport BBCardBill from './cardBill';\nimport { BASE_ENDPOINT, DEFAULT_HEADERS } from '../constants';\n\nexport default class BBCard {\n  constructor({ brand, modality, cardAccountNumber, cardNumber }) {\n    this.brand = brand;\n    this.modality = modality;\n    this.cardAccountNumber = cardAccountNumber;\n    this.cardNumber = cardNumber;\n  }\n\n  async getBills() {\n    const billsUrl = 'tela/ExtratoFatura/mesAnterior';\n\n    const params = {\n      codigoModalidade: this.modality,\n      numeroContaCartao: this.cardAccountNumber,\n      numeroPlastico: this.cardNumber,\n    };\n\n    const response = await fetch(`${BASE_ENDPOINT}${billsUrl}`, {\n      headers: {\n        ...DEFAULT_HEADERS,\n        cookie: LoginCookie.getGlobal(),\n      },\n      method: 'POST',\n      body: querystring.stringify(params),\n    });\n\n    const text = await response.text();\n    const json = JSON.parse(text);\n\n    return json.conteiner.telas[0].sessoes[0].celulas\n      .map(c =>\n        c.protocolo.parametros\n          .map(p => ({ [p[0]]: p[1] }))\n          .reduce((acc, p) => ({ ...acc, ...p }), {}),\n      )\n      .map(\n        p =>\n          new BBCardBill({\n            cardAccountNumber: this.cardAccountNumber,\n            billId: p.sequencialFatura,\n            billDate: p.dataFatura,\n          }),\n      );\n  }\n}\n"]}