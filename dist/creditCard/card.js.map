{"version":3,"sources":["../../src/creditCard/card.js"],"names":["BBCard","brand","modality","cardAccountNumber","cardNumber","billsUrl","params","codigoModalidade","numeroContaCartao","numeroPlastico","BASE_ENDPOINT","headers","DEFAULT_HEADERS","cookie","LoginCookie","getGlobal","method","body","querystring","stringify","response","text","json","JSON","parse","bills","conteiner","telas","sessoes","celulas","map","c","protocolo","parametros","p","reduce","acc","BBCardBill","billId","sequencialFatura","billDate","dataFatura","status","openedBillDate","slice","parseInt","toString","padStart","unshift"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;IAEqBA,M;;;AACnB,wBAAgE;AAAA,QAAlDC,KAAkD,QAAlDA,KAAkD;AAAA,QAA3CC,QAA2C,QAA3CA,QAA2C;AAAA,QAAjCC,iBAAiC,QAAjCA,iBAAiC;AAAA,QAAdC,UAAc,QAAdA,UAAc;AAAA;AAC9D,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;;;;;;;;;;;AAGOC,cAAAA,Q,GAAW,gC;AAEXC,cAAAA,M,GAAS;AACbC,gBAAAA,gBAAgB,EAAE,KAAKL,QADV;AAEbM,gBAAAA,iBAAiB,EAAE,KAAKL,iBAFX;AAGbM,gBAAAA,cAAc,EAAE,KAAKL;AAHR,e;;mDAMQ,qCAASM,wBAAT,SAAyBL,QAAzB,GAAqC;AAC1DM,gBAAAA,OAAO,oBACFC,0BADE;AAELC,kBAAAA,MAAM,EAAEC,wBAAYC,SAAZ;AAFH,kBADmD;AAK1DC,gBAAAA,MAAM,EAAE,MALkD;AAM1DC,gBAAAA,IAAI,EAAEC,wBAAYC,SAAZ,CAAsBb,MAAtB;AANoD,eAArC,C;;;AAAjBc,cAAAA,Q;;mDASaA,QAAQ,CAACC,IAAT,E;;;AAAbA,cAAAA,I;AACAC,cAAAA,I,GAAOC,IAAI,CAACC,KAAL,CAAWH,IAAX,C;AAEPI,cAAAA,K,GAAQH,IAAI,CAACI,SAAL,CAAeC,KAAf,CAAqB,CAArB,EAAwBC,OAAxB,CAAgC,CAAhC,EAAmCC,OAAnC,CACXC,GADW,CACP,UAAAC,CAAC;AAAA,uBACJA,CAAC,CAACC,SAAF,CAAYC,UAAZ,CACGH,GADH,CACO,UAAAI,CAAC;AAAA,8DAAQA,CAAC,CAAC,CAAD,CAAT,EAAeA,CAAC,CAAC,CAAD,CAAhB;AAAA,iBADR,EAEGC,MAFH,CAEU,UAACC,GAAD,EAAMF,CAAN;AAAA,2CAAkBE,GAAlB,MAA0BF,CAA1B;AAAA,iBAFV,EAE0C,EAF1C,CADI;AAAA,eADM,EAMXJ,GANW,CAOV,UAAAI,CAAC;AAAA,uBACC,IAAIG,oBAAJ,CAAe;AACblC,kBAAAA,iBAAiB,EAAE,KAAI,CAACA,iBADX;AAEbmC,kBAAAA,MAAM,EAAEJ,CAAC,CAACK,gBAFG;AAGbC,kBAAAA,QAAQ,EAAEN,CAAC,CAACO,UAHC;AAIbC,kBAAAA,MAAM,EAAE;AAJK,iBAAf,CADD;AAAA,eAPS,C;AAgBRC,cAAAA,c,GACJlB,KAAK,CAAC,CAAD,CAAL,CAASe,QAAT,CAAkBI,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,IACA,CAACC,QAAQ,CAACpB,KAAK,CAAC,CAAD,CAAL,CAASe,QAAT,CAAkBI,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,CAAD,EAAgC,EAAhC,CAAR,GAA8C,CAA/C,EACGE,QADH,GAEGC,QAFH,CAEY,CAFZ,EAEe,GAFf,CADA,GAIAtB,KAAK,CAAC,CAAD,CAAL,CAASe,QAAT,CAAkBI,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,C;AAEFnB,cAAAA,KAAK,CAACuB,OAAN,CACE,IAAIX,oBAAJ,CAAe;AACblC,gBAAAA,iBAAiB,EAAEsB,KAAK,CAAC,CAAD,CAAL,CAAStB,iBADf;AAEbqC,gBAAAA,QAAQ,EAAEG,cAFG;AAGbD,gBAAAA,MAAM,EAAE;AAHK,eAAf,CADF;+CAQOjB,K","sourcesContent":["import fetch from 'node-fetch';\nimport querystring from 'querystring';\nimport LoginCookie from '../loginCookie';\nimport BBCardBill from './cardBill';\nimport { BASE_ENDPOINT, DEFAULT_HEADERS } from '../constants';\n\nexport default class BBCard {\n  constructor({ brand, modality, cardAccountNumber, cardNumber }) {\n    this.brand = brand;\n    this.modality = modality;\n    this.cardAccountNumber = cardAccountNumber;\n    this.cardNumber = cardNumber;\n  }\n\n  async getBills() {\n    const billsUrl = 'tela/ExtratoFatura/mesAnterior';\n\n    const params = {\n      codigoModalidade: this.modality,\n      numeroContaCartao: this.cardAccountNumber,\n      numeroPlastico: this.cardNumber,\n    };\n\n    const response = await fetch(`${BASE_ENDPOINT}${billsUrl}`, {\n      headers: {\n        ...DEFAULT_HEADERS,\n        cookie: LoginCookie.getGlobal(),\n      },\n      method: 'POST',\n      body: querystring.stringify(params),\n    });\n\n    const text = await response.text();\n    const json = JSON.parse(text);\n\n    const bills = json.conteiner.telas[0].sessoes[0].celulas\n      .map(c =>\n        c.protocolo.parametros\n          .map(p => ({ [p[0]]: p[1] }))\n          .reduce((acc, p) => ({ ...acc, ...p }), {}),\n      )\n      .map(\n        p =>\n          new BBCardBill({\n            cardAccountNumber: this.cardAccountNumber,\n            billId: p.sequencialFatura,\n            billDate: p.dataFatura,\n            status: 'closed',\n          }),\n      );\n\n    const openedBillDate =\n      bills[0].billDate.slice(0, 2) +\n      (parseInt(bills[0].billDate.slice(2, 4), 10) + 1)\n        .toString()\n        .padStart(2, '0') +\n      bills[0].billDate.slice(4, 8);\n\n    bills.unshift(\n      new BBCardBill({\n        cardAccountNumber: bills[0].cardAccountNumber,\n        billDate: openedBillDate,\n        status: 'opened',\n      }),\n    );\n\n    return bills;\n  }\n}\n"],"file":"card.js"}