{"version":3,"sources":["../../src/savings/index.js"],"names":["BBSavings","accountsUrl","BASE_ENDPOINT","headers","DEFAULT_HEADERS","cookie","LoginCookie","getGlobal","response","text","json","JSON","parse","sessions","conteiner","telas","sessoes","title","cabecalho","variations","celulas","map","c","acao","split","splice","variation","parseInt","v","description","year","month","pad","s","toString","padStart","params","metodo","variacao","periodo","querystring","stringify","session","find","includes","componentes","filter","comp","texto","date","Date","amount"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;IAEqBA,S;;;;;;;;;;;;;;AAEXC,2B,GAAc,gC;;uBAEG,8BAASC,wBAAT,GAAyBD,WAAzB,EAAwC;AAC7DE,sDACKC,0BADL;AAEEC,4BAAQC,sBAAYC,SAAZ;AAFV;AAD6D,iBAAxC,C;;;AAAjBC,wB;;uBAOaA,SAASC,IAAT,E;;;AAAbA,oB;AACAC,oB,GAAOC,KAAKC,KAAL,CAAWH,IAAX,C;AAEPI,wB,GAAWH,KAAKI,SAAL,CAAeC,KAAf,CAAqB,CAArB,EAAwBC,OAAxB,CAAgC,CAAhC,C;AACXC,qB,GAAQJ,SAASK,S;AACjBC,0B,GAAaN,SAASO,OAAT,CAAiBC,GAAjB,CACjB;AAAA,yBAAKC,EAAEC,IAAF,CAAOC,KAAP,CAAa,WAAb,EAA0BC,MAA1B,CAAiC,CAAC,CAAlC,EAAqC,CAArC,CAAL;AAAA,iBADiB,C;iDAIZN,WAAWE,GAAX,CAAe;AAAA,yBAAM;AAC1BK,+BAAWC,SAASC,CAAT,EAAY,EAAZ,CADe;AAE1BC,iCAAgBZ,KAAhB,0BAAoCW;AAFV,mBAAN;AAAA,iBAAf,C;;;;;;;;;;;;;;;;;;;;YAMeF,S,SAAAA,S;YAAWI,I,SAAAA,I;YAAMC,K,SAAAA,K;;;;;;AACjCC,mB,GAAM,SAANA,GAAM;AAAA,yBAAKC,EAAEC,QAAF,GAAaC,QAAb,CAAsB,GAAtB,EAA2B,CAA3B,CAAL;AAAA,iB;;AACNlC,2B,GAAc,oC;AACdmC,sB,GAAS;AACbC,0BAAQ,aADK;AAEbC,4BAAUZ,SAFG;AAGba,mCAAeP,IAAID,KAAJ,CAAf,SAA6BD;AAHhB,iB;;uBAMQ,8BAClB5B,wBADkB,GACFD,WADE,SACauC,sBAAYC,SAAZ,CAAsBL,MAAtB,CADb,EAErB;AACEjC,sDACKC,0BADL;AAEEC,4BAAQC,sBAAYC,SAAZ;AAFV;AADF,iBAFqB,C;;;AAAjBC,wB;;uBAUaA,SAASC,IAAT,E;;;AAAbA,oB;AACAC,oB,GAAOC,KAAKC,KAAL,CAAWH,IAAX,C;AAEPiC,uB,GAAUhC,KAAKI,SAAL,CAAeC,KAAf,CAAqB,CAArB,EAAwBC,OAAxB,CAAgC2B,IAAhC,CACd;AAAA,yBAAKV,EAAEf,SAAF,IAAee,EAAEf,SAAF,CAAY0B,QAAZ,CAAqB,gBAArB,CAApB;AAAA,iBADc,C;kDAGTF,QAAQtB,OAAR,CACJC,GADI,CACA;AAAA,yBAAKC,EAAEuB,WAAP;AAAA,iBADA,EAEJC,MAFI,CAEG;AAAA,yBAAQC,KAAK,CAAL,EAAQF,WAAR,CAAoB,CAApB,EAAuBG,KAAvB,KAAiC,KAAzC;AAAA,iBAFH,EAGJ3B,GAHI,CAGA;AAAA,yBAAM;AACT4B,0BAAM,IAAIC,IAAJ,CAASpB,IAAT,EAAeC,QAAQ,CAAvB,EAA0BT,EAAE,CAAF,EAAKuB,WAAL,CAAiB,CAAjB,EAAoBG,KAA9C,CADG;AAETnB,iCAAa,+BAAiBP,EAAE,CAAF,EAAKuB,WAAL,CAAiB,CAAjB,EAAoBG,KAArC,CAFJ;AAGTG,4BAAQ,gCAAkB7B,EAAE,CAAF,EAAKuB,WAAL,CAAiB,CAAjB,EAAoBG,KAAtC;AAHC,mBAAN;AAAA,iBAHA,C;;;;;;;;;;;;;;;;;;;;kBAnDUhD,S","file":"index.js","sourcesContent":["import fetch from 'node-fetch';\nimport querystring from 'querystring';\nimport LoginCookie from '../loginCookie';\nimport { BASE_ENDPOINT, DEFAULT_HEADERS } from '../constants';\nimport { treatDescription, parseAmountString } from '../helpers';\n\nexport default class BBSavings {\n  async getAccounts() {\n    const accountsUrl = 'tela/ExtratoDePoupanca/entrada';\n\n    const response = await fetch(`${BASE_ENDPOINT}${accountsUrl}`, {\n      headers: {\n        ...DEFAULT_HEADERS,\n        cookie: LoginCookie.getGlobal(),\n      },\n    });\n\n    const text = await response.text();\n    const json = JSON.parse(text);\n\n    const sessions = json.conteiner.telas[0].sessoes[0];\n    const title = sessions.cabecalho;\n    const variations = sessions.celulas.map(\n      c => c.acao.split('variacao=').splice(-1)[0],\n    );\n\n    return variations.map(v => ({\n      variation: parseInt(v, 10),\n      description: `${title} - Variação ${v}`,\n    }));\n  }\n\n  async getTransactions({ variation, year, month }) {\n    const pad = s => s.toString().padStart('0', 2);\n    const accountsUrl = 'tela/ExtratoDePoupanca/menuPeriodo';\n    const params = {\n      metodo: 'mesAnterior',\n      variacao: variation,\n      periodo: `01/${pad(month)}/${year}`,\n    };\n\n    const response = await fetch(\n      `${BASE_ENDPOINT}${accountsUrl}?${querystring.stringify(params)}`,\n      {\n        headers: {\n          ...DEFAULT_HEADERS,\n          cookie: LoginCookie.getGlobal(),\n        },\n      },\n    );\n\n    const text = await response.text();\n    const json = JSON.parse(text);\n\n    const session = json.conteiner.telas[0].sessoes.find(\n      s => s.cabecalho && s.cabecalho.includes('Mês referência'),\n    );\n    return session.celulas\n      .map(c => c.componentes)\n      .filter(comp => comp[0].componentes[0].texto !== 'Dia')\n      .map(c => ({\n        date: new Date(year, month - 1, c[0].componentes[0].texto),\n        description: treatDescription(c[1].componentes[0].texto),\n        amount: parseAmountString(c[2].componentes[0].texto),\n      }));\n  }\n}\n"]}