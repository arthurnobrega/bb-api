{"version":3,"sources":["../src/checking.js"],"names":["BBChecking","loginCookie","year","month","pad","s","toString","padStart","transactionsUrl","params","periodo","BASE_ENDPOINT","headers","DEFAULT_HEADERS","cookie","method","body","querystring","stringify","response","text","json","JSON","parse","transactions","conteiner","telas","sessoes","reduce","acc","session","monthString","TIPO","cabecalho","indexOf","celulas","cellAcc","cell","componentes","length","texto","description","day","amount","includes","date","Date","balanceUrl","servicoSaldo","saldo"],"mappings":"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","file":"checking.js","sourcesContent":["import fetch from 'node-fetch';\nimport querystring from 'querystring';\nimport { BASE_ENDPOINT, DEFAULT_HEADERS } from './constants';\nimport { mountDate, treatDescription, parseAmountString } from './helpers';\n\nexport default class BBChecking {\n  loginCookie = null;\n\n  constructor(loginCookie) {\n    this.loginCookie = loginCookie;\n  }\n\n  async getTransactions({ year, month }) {\n    const pad = s => s.toString().padStart('0', 2);\n    const transactionsUrl = 'tela/ExtratoDeContaCorrente/extrato';\n\n    let params = {};\n\n    if (year && month) {\n      params = { periodo: `01${pad(month)}${year}` };\n    }\n\n    const response = await fetch(`${BASE_ENDPOINT}${transactionsUrl}`, {\n      headers: {\n        ...DEFAULT_HEADERS,\n        cookie: this.loginCookie,\n      },\n      method: 'POST',\n      body: querystring.stringify(params),\n    });\n\n    const text = await response.text();\n    const json = JSON.parse(text);\n\n    const transactions = json.conteiner.telas[0].sessoes.reduce((acc, session) => {\n      const monthString = 'Mês referência: ';\n      if (\n        session.TIPO === 'sessao' &&\n        session.cabecalho &&\n        session.cabecalho.indexOf(monthString) === 0\n      ) {\n        return [\n          ...acc,\n          ...session.celulas.reduce((cellAcc, cell) => {\n            if (\n              cell.TIPO === 'celula' &&\n              cell.componentes.length === 3 &&\n              cell.componentes[0].componentes[0].texto !== 'Dia'\n            ) {\n              const description = cell.componentes[1].componentes[0].texto;\n              const day = cell.componentes[0].componentes[0].texto;\n              const amount = cell.componentes[2].componentes[0].texto;\n\n              if (['Saldo Anterior', 'S A L D O'].includes(description)) {\n                return cellAcc;\n              }\n\n              return [\n                ...cellAcc,\n                {\n                  date: new Date(year, month, day),\n                  description: treatDescription(description),\n                  amount: parseAmountString(amount),\n                },\n              ];\n            }\n\n            return cellAcc;\n          }, []),\n        ];\n      }\n\n      return acc;\n    }, []);\n\n    return transactions;\n  }\n\n  async getBalance() {\n    const balanceUrl = 'servico/ServicoSaldo/saldo';\n\n    const response = await fetch(`${BASE_ENDPOINT}${balanceUrl}`, {\n      headers: {\n        ...DEFAULT_HEADERS,\n        cookie: this.loginCookie,\n      },\n      method: 'POST',\n    });\n\n    const text = await response.text();\n    const { servicoSaldo } = JSON.parse(text);\n\n    const { saldo } = servicoSaldo;\n\n    return parseAmountString(saldo);\n  }\n}\n"]}