{"version":3,"sources":["../src/bb.js"],"names":["refreshHash","hashUrl","params","id","BASE_ENDPOINT","headers","DEFAULT_HEADERS","method","body","querystring","stringify","response","text","hash","BB","LoginCookie","setGlobal","getGlobal","branch","account","password","loginUrl","idh","dependenciaOrigem","numeroContratoOrigem","senhaConta","titularidade","apelido","idDispositivo","get","JSON","parse","login","checking","BBChecking","savings","BBSavings","creditCard","BBCreditCard"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,UAAAA,OADY,GACF,MADE;AAEZC,UAAAA,MAFY,GAEH;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAFG;AAAA;AAAA,+CAIK,qCAASC,wBAAT,SAAyBH,OAAzB,GAAoC;AACzDI,YAAAA,OAAO,EAAEC,0BADgD;AAEzDC,YAAAA,MAAM,EAAE,MAFiD;AAGzDC,YAAAA,IAAI,EAAEC,wBAAYC,SAAZ,CAAsBR,MAAtB;AAHmD,WAApC,CAJL;;AAAA;AAIZS,UAAAA,QAJY;AAAA;AAAA,+CAUCA,QAAQ,CAACC,IAAT,EAVD;;AAAA;AAUZC,UAAAA,IAVY;AAAA,2CAYXA,IAZW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;IAeqBC,E;;;AAOnB,gBAAc;AAAA;AAAA,uDANH,IAMG;AAAA,sDAJJ,IAII;AAAA,yDAFD,IAEC;;AACZC,4BAAYC,SAAZ;AACD;;;;iCAEY;AACX,aAAO,CAAC,CAACD,wBAAYE,SAAZ,EAAT;AACD;;;;;;;;;;AAEaC,cAAAA,M,QAAAA,M,EAAQC,O,QAAAA,O,EAASC,Q,QAAAA,Q;AACvBC,cAAAA,Q,GAAW,4B;;mDACErB,WAAW,E;;;AAAxBa,cAAAA,I;AAEAX,cAAAA,M,GAAS;AACboB,gBAAAA,GAAG,EAAET,IADQ;AAEbU,gBAAAA,iBAAiB,EAAEL,MAFN;AAGbM,gBAAAA,oBAAoB,EAAEL,OAHT;AAIbM,gBAAAA,UAAU,EAAEL,QAJC;AAKbM,gBAAAA,YAAY,EAAE,GALD;AAMbC,gBAAAA,OAAO,EAAE,mBANI;AAObC,gBAAAA,aAAa,EAAE;AAPF,e;;mDAUQ,qCAASxB,wBAAT,SAAyBiB,QAAzB,GAAqC;AAC1DhB,gBAAAA,OAAO,EAAEC,0BADiD;AAE1DC,gBAAAA,MAAM,EAAE,MAFkD;AAG1DC,gBAAAA,IAAI,EAAEC,wBAAYC,SAAZ,CAAsBR,MAAtB;AAHoD,eAArC,C;;;AAAjBS,cAAAA,Q;;AAMNI,sCAAYC,SAAZ,CAAsBL,QAAQ,CAACN,OAAT,CAAiBwB,GAAjB,CAAqB,YAArB,CAAtB;;;mDAEmBlB,QAAQ,CAACC,IAAT,E;;;AAAbA,cAAAA,I;4BACYkB,IAAI,CAACC,KAAL,CAAWnB,IAAX,C,EAAVoB,K,eAAAA,K;AAER,mBAAKC,QAAL,GAAgB,IAAIC,oBAAJ,EAAhB;AACA,mBAAKC,OAAL,GAAe,IAAIC,mBAAJ,EAAf;AACA,mBAAKC,UAAL,GAAkB,IAAIC,sBAAJ,EAAlB;gDAEON,K","sourcesContent":["import fetch from 'node-fetch';\nimport querystring from 'querystring';\nimport LoginCookie from './loginCookie';\nimport { BASE_ENDPOINT, DEFAULT_HEADERS } from './constants';\nimport BBChecking from './checking';\nimport BBSavings from './savings';\nimport BBCreditCard from './creditCard';\n\nconst refreshHash = async () => {\n  const hashUrl = 'hash';\n  const params = { id: '00000000000000000000000000000000' };\n\n  const response = await fetch(`${BASE_ENDPOINT}${hashUrl}`, {\n    headers: DEFAULT_HEADERS,\n    method: 'POST',\n    body: querystring.stringify(params),\n  });\n\n  const hash = await response.text();\n\n  return hash;\n};\n\nexport default class BB {\n  checking = null;\n\n  savings = null;\n\n  creditCard = null;\n\n  constructor() {\n    LoginCookie.setGlobal();\n  }\n\n  isLoggedIn() {\n    return !!LoginCookie.getGlobal();\n  }\n\n  async login({ branch, account, password }) {\n    const loginUrl = 'servico/ServicoLogin/login';\n    const hash = await refreshHash();\n\n    const params = {\n      idh: hash,\n      dependenciaOrigem: branch,\n      numeroContratoOrigem: account,\n      senhaConta: password,\n      titularidade: '1',\n      apelido: 'NickRandom.123456',\n      idDispositivo: '2131296671',\n    };\n\n    const response = await fetch(`${BASE_ENDPOINT}${loginUrl}`, {\n      headers: DEFAULT_HEADERS,\n      method: 'POST',\n      body: querystring.stringify(params),\n    });\n\n    LoginCookie.setGlobal(response.headers.get('set-cookie'));\n\n    const text = await response.text();\n    const { login } = JSON.parse(text);\n\n    this.checking = new BBChecking();\n    this.savings = new BBSavings();\n    this.creditCard = new BBCreditCard();\n\n    return login;\n  }\n}\n"],"file":"bb.js"}