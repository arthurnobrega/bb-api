{"version":3,"sources":["../src/bb.js"],"names":["refreshHash","hashUrl","params","id","BASE_ENDPOINT","headers","DEFAULT_HEADERS","method","body","querystring","stringify","response","text","hash","BB","checking","savings","creditCard","LoginCookie","setGlobal","branch","account","password","loginUrl","idh","dependenciaOrigem","numeroContratoOrigem","senhaConta","titularidade","apelido","idDispositivo","get","JSON","parse","login","BBChecking","BBSavings","BBCreditCard","getGlobal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA;AAAA,sFAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,mBADY,GACF,MADE;AAEZC,kBAFY,GAEH,EAAEC,IAAI,kCAAN,EAFG;AAAA;AAAA,mBAIK,8BAASC,wBAAT,GAAyBH,OAAzB,EAAoC;AACzDI,uBAASC,0BADgD;AAEzDC,sBAAQ,MAFiD;AAGzDC,oBAAMC,sBAAYC,SAAZ,CAAsBR,MAAtB;AAHmD,aAApC,CAJL;;AAAA;AAIZS,oBAJY;AAAA;AAAA,mBAUCA,SAASC,IAAT,EAVD;;AAAA;AAUZC,gBAVY;AAAA,6CAYXA,IAZW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;IAeqBC,E;AAOnB,gBAAc;AAAA;AAAA,SANdC,QAMc,GANH,IAMG;AAAA,SAJdC,OAIc,GAJJ,IAII;AAAA,SAFdC,UAEc,GAFD,IAEC;;AACZC,0BAAYC,SAAZ;AACD;;;;;;YAEaC,M,SAAAA,M;YAAQC,O,SAAAA,O;YAASC,Q,SAAAA,Q;;;;;;;;AACvBC,wB,GAAW,4B;;uBACEvB,a;;;AAAba,oB;AAEAX,sB,GAAS;AACbsB,uBAAKX,IADQ;AAEbY,qCAAmBL,MAFN;AAGbM,wCAAsBL,OAHT;AAIbM,8BAAYL,QAJC;AAKbM,gCAAc,GALD;AAMbC,2BAAS,mBANI;AAObC,iCAAe;AAPF,iB;;uBAUQ,8BAAS1B,wBAAT,GAAyBmB,QAAzB,EAAqC;AAC1DlB,2BAASC,0BADiD;AAE1DC,0BAAQ,MAFkD;AAG1DC,wBAAMC,sBAAYC,SAAZ,CAAsBR,MAAtB;AAHoD,iBAArC,C;;;AAAjBS,wB;;;AAMNO,sCAAYC,SAAZ,CAAsBR,SAASN,OAAT,CAAiB0B,GAAjB,CAAqB,YAArB,CAAtB;;;uBAEmBpB,SAASC,IAAT,E;;;AAAbA,oB;8BACYoB,KAAKC,KAAL,CAAWrB,IAAX,C,EAAVsB,K,eAAAA,K;;;AAER,qBAAKnB,QAAL,GAAgB,IAAIoB,kBAAJ,EAAhB;AACA,qBAAKnB,OAAL,GAAe,IAAIoB,iBAAJ,EAAf;AACA,qBAAKnB,UAAL,GAAkB,IAAIoB,oBAAJ,EAAlB;;kDAEOH,K;;;;;;;;;;;;;;;;;;iCAGI;AACX,aAAO,CAAC,CAAChB,sBAAYoB,SAAZ,EAAT;AACD;;;;;kBA7CkBxB,E","file":"bb.js","sourcesContent":["import fetch from 'node-fetch';\nimport querystring from 'querystring';\nimport LoginCookie from './loginCookie';\nimport { BASE_ENDPOINT, DEFAULT_HEADERS } from './constants';\nimport BBChecking from './checking';\nimport BBSavings from './savings';\nimport BBCreditCard from './creditCard';\n\nconst refreshHash = async () => {\n  const hashUrl = 'hash';\n  const params = { id: '00000000000000000000000000000000' };\n\n  const response = await fetch(`${BASE_ENDPOINT}${hashUrl}`, {\n    headers: DEFAULT_HEADERS,\n    method: 'POST',\n    body: querystring.stringify(params),\n  });\n\n  const hash = await response.text();\n\n  return hash;\n};\n\nexport default class BB {\n  checking = null;\n\n  savings = null;\n\n  creditCard = null;\n\n  constructor() {\n    LoginCookie.setGlobal();\n  }\n\n  async login({ branch, account, password }) {\n    const loginUrl = 'servico/ServicoLogin/login';\n    const hash = await refreshHash();\n\n    const params = {\n      idh: hash,\n      dependenciaOrigem: branch,\n      numeroContratoOrigem: account,\n      senhaConta: password,\n      titularidade: '1',\n      apelido: 'NickRandom.123456',\n      idDispositivo: '2131296671',\n    };\n\n    const response = await fetch(`${BASE_ENDPOINT}${loginUrl}`, {\n      headers: DEFAULT_HEADERS,\n      method: 'POST',\n      body: querystring.stringify(params),\n    });\n\n    LoginCookie.setGlobal(response.headers.get('set-cookie'));\n\n    const text = await response.text();\n    const { login } = JSON.parse(text);\n\n    this.checking = new BBChecking();\n    this.savings = new BBSavings();\n    this.creditCard = new BBCreditCard();\n\n    return login;\n  }\n\n  isLoggedIn() {\n    return !!LoginCookie.getGlobal();\n  }\n}\n"]}